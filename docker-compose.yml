services:
  backend-service1:
    #image: mcr.microsoft.com/dotnet/aspnet:latest
    image: mcr.microsoft.com/dotnet/sdk:latest
    container_name: dotnetcv-backend-service1
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001
    ports:
      - "5001:5001"
    volumes:
      - ./backend/service1:/app
    working_dir: /app
    command: [ "dotnet", "run" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5001/health" ]
      interval: 10s
      retries: 3
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend-service2:
    #image: mcr.microsoft.com/dotnet/aspnet:latest
    image: mcr.microsoft.com/dotnet/sdk:latest
    container_name: dotnetcv-backend-service2
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5002
    ports:
      - "5002:5002"
    volumes:
      - ./backend/service2:/app
    working_dir: /app
    command: [ "dotnet", "run" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5002/health" ]
      interval: 10s
      retries: 3
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    image: node:latest  # Latest Node.js
    container_name: dotnetcv-frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevents conflicts
    ports:
      - "5173:5173"  # Expose React app
    command: ["sh", "-c", "npm install && npm run dev"]  # Ensure dependencies are installed
    environment:
      - NODE_ENV=development
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5173/" ]
      interval: 10s
      retries: 3
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  localstack:
    image: localstack/localstack:latest
    container_name: dotnetcv-localstack
    restart: unless-stopped
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,sns,sqs,lambda,ssm,apigateway,iam,logs
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - DEBUG=1
      - DATA_DIR=/var/lib/localstack  # Persistent data directory
      - PERSISTENCE=1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./lambda:/lambda"  # Mount all Lambda directories
      - "./localstack/init-localstack.sh:/init-localstack.sh"  # Mount init script
      - "./localstack/init-gatewayapi.sh:/init-gatewayapi.sh"  # Mount init script
      - "localstack-data:/var/lib/localstack"  # Persistent volume for LocalStack

  postgres:
    image: postgres:latest
    container_name: dotnetcv-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: dotnetcv
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # dev:
  #   image: mcr.microsoft.com/dotnet/sdk:latest
  #   container_name: dotnetcv-dev
  #   volumes:
  #     - ./:/app
  #   working_dir: /app
  #   command: [ "/bin/sh", "-c", "sleep infinity" ]

  ## ðŸ“Œ **LOKI for log storage**
  loki:
    image: grafana/loki:latest
    container_name: dotnetcv-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  ## ðŸ“Œ **Promtail collects logs from all containers**
  promtail:
    image: grafana/promtail:latest
    container_name: dotnetcv-promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./localstack/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    user: root   # Added to ensure proper permissions

  ## ðŸ“Œ **Grafana for viewing logs**
  grafana:
    image: grafana/grafana:latest
    container_name: dotnetcv-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    depends_on:
      - loki

  pgweb:
    image: sosedoff/pgweb:latest
    container_name: dotnetcv-pgweb
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - PGWEB_DATABASE_URL=postgres://admin:admin@postgres:5432/dotnetcv?sslmode=disable
    depends_on:
      - postgres
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  grafana-data:
  postgres-data:
  localstack-data:
